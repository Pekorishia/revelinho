require 'rails_helper'

feature 'Employee comments candidate' do
  scenario 'Employee writes comment' do
    candidate = create(:candidate)
    create(:candidate_profile, candidate: candidate)
    gustavo = create(:employee, email: 'gustavo@empresa.com')

    login_as gustavo, scope: :employee
    visit candidate_path(candidate)
    fill_in 'Novo comentário', with: 'Precisamos contratar essa pessoa agora!'
    click_on 'Postar'

    expect(page).to have_css('.comment', count: 1)
    within '#comment-1' do
      expect(page).to have_content('gustavo')
      expect(page).to have_content('Precisamos contratar essa pessoa agora!')
    end
  end

  scenario 'Employee sees comments' do
    candidate = create(:candidate)
    create(:candidate_profile, candidate: candidate)
    company = create(:company)
    gustavo = create(:employee, email: 'gustavo@empresa.com', company: company)
    fernanda = create(
      :employee,
      email: 'fernanda@empresa.com',
      company: company
    )
    create(:candidate_note, comment: 'Precisamos ' \
    'contratar essa pessoa agora!', employee: gustavo, candidate: candidate)
    create(:candidate_note, comment: 'Eu acho melhor ' \
    'continuarmos buscando...', employee: fernanda, candidate: candidate)

    login_as gustavo, scope: :employee
    visit candidate_path(candidate)

    expect(page).to have_css('.comment', count: 2)
    within '#comment-1' do
      expect(page).to have_content('gustavo')
      expect(page).to have_content('Precisamos contratar essa pessoa agora!')
    end
    within '#comment-2' do
      expect(page).to have_content('fernanda')
      expect(page).to have_content('Eu acho melhor continuarmos buscando...')
    end
  end

  scenario 'Employee only sees comments from his companie\'s employees' do
    # Company is auto generated by factory
    employee_google = create(:employee, email: 'gustavo@google.com')
    employee_facebook = create(:employee, email: 'fernando@facebook.com')
    candidate = create(:candidate)
    create(:candidate_profile, candidate: candidate)
    create(
      :candidate_note,
      comment: 'Precisamos contratar essa pessoa agora!',
      employee: employee_google,
      candidate: candidate
    )
    create(:candidate_note, comment: 'Eu sou do ' \
    'facebook', employee: employee_facebook, candidate: candidate)

    login_as employee_google, scope: :employee
    visit candidate_path(candidate)

    expect(page).to_not have_content('fernando')
    expect(page).to_not have_content('Eu sou do facebook')
    expect(page).to have_css('.comment', count: 1)
    within '#comment-1' do
      expect(page).to have_content('gustavo')
      expect(page).to have_content('Precisamos contratar essa pessoa agora!')
    end
  end

  scenario 'Note belongs only to correct candidate' do
    candidate = create(:candidate)
    another_candidate = create(:candidate)
    create(:candidate_profile, candidate: candidate)
    create(:candidate_profile, candidate: another_candidate)
    gustavo = create(:employee, email: 'gustavo@empresa.com')

    login_as gustavo, scope: :employee
    visit candidate_path(candidate)
    fill_in 'Novo comentário', with: 'Contrata el@'
    click_on 'Postar'
    visit candidate_path(another_candidate)

    expect(page).not_to have_content('Contrata el@')
  end
end
